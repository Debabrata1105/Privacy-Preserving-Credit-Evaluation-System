syntax = "proto3";

package credit_evaluation;

// Service definition for the NBFC
service NBFCService {
    // Accepts encrypted financial data and returns proof
    rpc GenerateCreditProof(EncryptedFinancialRequest) returns (CreditProofResponse);
}

// Service definition for the Bank
service BankService {
    // Verifies proof and returns loan eligibility decision
    rpc VerifyProofAndDecide(CreditProofRequest) returns (LoanDecisionResponse);
}

// Request message containing encrypted financial data
message EncryptedFinancialRequest {
    bytes encrypted_salary = 1;
    repeated bytes encrypted_expenses = 2;
    bytes encryption_context = 3;  // Contains serialized encoder and other necessary context
    uint64 threshold = 4;          // Salary threshold for loan eligibility
}

// Response message containing proof and average expense
message CreditProofResponse {
    bytes zkp_proof = 1;           // Zero-knowledge proof that salary > threshold
    bytes encrypted_avg_expense = 2;  // Encrypted average expense
    bytes nonce = 3;               // Nonce for proof verification
    bytes public_inputs = 4;       // Public inputs for proof verification
}

// Request message for bank to verify proof
message CreditProofRequest {
    bytes zkp_proof = 1;
    bytes public_inputs = 2;
    bytes encrypted_avg_expense = 3;
    bytes nonce = 4;
    uint64 threshold = 5;          // Salary threshold
    uint64 max_expense_ratio = 6;  // Maximum allowed expense/income ratio
}

// Response message containing loan decision
message LoanDecisionResponse {
    bool eligible = 1;
    string reason = 2;
    uint32 credit_score = 3;       // Computed credit score
}

// Message for reusable proof sharing
message SharedProofBundle {
    bytes zkp_proof = 1;
    bytes public_inputs = 2;
    bytes encrypted_avg_expense = 3;
    bytes proof_id = 4;            // Unique identifier for the proof
    uint64 expiration_timestamp = 5; // When this proof bundle expires
    bytes user_id_hash = 6;        // Hashed user identifier
}